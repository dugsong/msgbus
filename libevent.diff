Index: http.c
===================================================================
--- http.c	(revision 300)
+++ http.c	(working copy)
@@ -643,6 +643,7 @@
 
 	/* notify interested parties that this connection is going down */
 	if (evcon->fd != -1) {
+		close(evcon->fd);
 		if (evcon->closecb != NULL)
 			(*evcon->closecb)(evcon, evcon->closecb_arg);
 	}
@@ -661,9 +662,6 @@
 	if (event_initialized(&evcon->ev))
 		event_del(&evcon->ev);
 	
-	if (evcon->fd != -1)
-		close(evcon->fd);
-
 	if (evcon->address != NULL)
 		free(evcon->address);
 
@@ -729,18 +727,18 @@
 evhttp_connection_start_detectclose(struct evhttp_connection *evcon)
 {
 	evcon->flags |= EVHTTP_CON_CLOSEDETECT;
-	
-	event_del(&evcon->ev);
-	event_set(&evcon->ev, evcon->fd, EV_READ,
+
+	event_del(&evcon->close_ev);
+	event_set(&evcon->close_ev, evcon->fd, EV_READ,
 	    evhttp_detect_close_cb, evcon);
-	event_add(&evcon->ev, NULL);
+	event_add(&evcon->close_ev, NULL);
 }
 
 static void
 evhttp_connection_stop_detectclose(struct evhttp_connection *evcon)
 {
 	evcon->flags &= ~EVHTTP_CON_CLOSEDETECT;
-	event_del(&evcon->ev);
+	event_del(&evcon->close_ev);
 }
 
 static void
@@ -1264,13 +1262,6 @@
 {
 	evcon->closecb = cb;
 	evcon->closecb_arg = cbarg;
-	/* 
-	 * applications that stream to clients forever might want to
-	 * detect when a browser or client has stopped receiving the
-	 * stream.  this would be detected on the next write in any case,
-	 * however, we can release resources earlier using this.
-	 */
-	evhttp_connection_start_detectclose(evcon);
 }
 
 void
@@ -1457,6 +1448,8 @@
 evhttp_send_reply_start(struct evhttp_request *req, int code,
     const char *reason)
 {
+	/* set up to watch for client close */
+	evhttp_connection_start_detectclose(req->evcon);
 	evhttp_response_code(req, code, reason);
 	evhttp_make_header(req->evcon, req);
 	evhttp_write_buffer(req->evcon, NULL, NULL);
Index: http-internal.h
===================================================================
--- http-internal.h	(revision 300)
+++ http-internal.h	(working copy)
@@ -41,6 +41,7 @@
 
 	int fd;
 	struct event ev;
+	struct event close_ev;
 	struct evbuffer *input_buffer;
 	struct evbuffer *output_buffer;
 	

lightweight HTTP publish/subscribe message bus based on libevent.
implements scalable server push via HTTP multipart/x-mixed-replace for
local or remote messaging.

what's here:

msgbus
	single-process HTTP message bus scaling to thousands of
	persistent connections at hundreds of messages per second

libevmsg
	libevent-based message library for simple evented
	publish/subscribe

demo
	simple AJAX+COMET webchat demo (e.g. ./msgbus -d demo)

+ some test programs and sample Python clients

quick protocol details:

to publish JPEGs as messages on the 'foo' channel:

    POST /msgbus/foo HTTP/1.0
    Content-Type: image/jpeg
    Content-Length: 342
    ...

to subscribe to all messages the 'foo' channel:

    GET /msgbus/foo HTTP/1.0

matching messages are returned in server-push mode, e.g.

    HTTP/1.0 200 OK
    Content-Type: multipart/x-mixed-replace;boundary=XXX

    --XXX
    Content-Type: image/jpeg
    Content-Length: 320
    ...
    --XXX
    Content-Type: text/html
    Content-Length: 53
    ...

or for HTTP/1.1:

    HTTP/1.1 200 OK
    Content-Type: multipart/x-mixed-replace;boundary=XXX
    Transfer-Encoding: chunked

    da
    --XXX
    Content-Type: image/jpeg
    ...
    2b
    -XXX
    Content-Type: application/x-whatever
    ...

to subscribe to only text and image messages on the 'foo' channel:

    GET /msgbus/foo?type=text/*,image/* HTTP/1.1

